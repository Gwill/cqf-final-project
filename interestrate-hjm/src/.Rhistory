cc_entity2,
cc_entity3),
yieldcurve_flat,UniformCorrelationMatrix(0.30,3),0.40,10000,"sobol")
View(CDS3_USD_XR_HistCreditCurve)
install.package("randtoolbox")
install.packages("randtoolbox")
library(randtoolbox)
halton(1000, dim = 5, init = TRUE, normal = FALSE, usetime = FALSE)
halton(1000, dim = 5, init = TRUE, normal = TRUE, usetime = FALSE)
sobol(1000, dim = 5, init = TRUE, normal = TRUE, usetime = FALSE)
sobol(1000, dim = 5, normal = TRUE, scrambling = 3)
torus(1000,dim=10,normal = TRUE)
#clear workspace
rm(list = ls())
#variables
current_dir = "P:/CQF/FinalProject/git-root/finalproject/creditbasket/src"
#End of variables
print("Program starting...")
#set current directory
setwd(current_dir)
source("class_definition.R") # define classes
#install / load dependencies
source("install_register_packages.R")
#historical data loading, cleaning. Credit Curve Construction
source("market_data_functions.R")
source("market_data_loading.R")
source("credit_curve_bootstrapping_functions.R")
#gaussian correlation matrix, student t correlation matrix and degree of freedom
source("default_probability_correlation_matrix.R") # load functions and process data
print(CorrelationMatrix_GaussianCopula)
print(CorrelationMatrix_KendallTau)
print(CorrelationMatrix_StudentTCopula)
cat("degree of freedom",degree_freedom)
#Estimate Marginal Hazard Rates (empirical marginal distributions)
source("estimate_marginal_hazard_rates.R")
print(HazardRatesMatrix)
#Load NAG library
source("nag_library_wrapper.R")
#Load functions used in Monte Carlo loop
source("monte_carlo_functions.R")
source("gaussian_copula_functions.R")
source("student_t_copula_functions.R")
ans1 = BasketCDSPricing_GaussianCopula(c(CDS1_USD_XR_MARGINAL_CreditCurve,
CDS2_USD_XR_MARGINAL_CreditCurve,
CDS3_USD_XR_MARGINAL_CreditCurve,
CDS4_USD_XR_MARGINAL_CreditCurve,
CDS5_USD_XR_MARGINAL_CreditCurve),
YieldCurve,CorrelationMatrix_GaussianCopula,0.40,100,"nag-sobol")
ans1 = BasketCDSPricing_GaussianCopula(c(CDS1_USD_XR_MARGINAL_CreditCurve,
CDS2_USD_XR_MARGINAL_CreditCurve,
CDS3_USD_XR_MARGINAL_CreditCurve,
CDS4_USD_XR_MARGINAL_CreditCurve,
CDS5_USD_XR_MARGINAL_CreditCurve),
YieldCurve,CorrelationMatrix_GaussianCopula,0.40,100,"sobol")
ans_student1 = BasketCDSPricing_StudentTCopula(c(CDS1_USD_XR_MARGINAL_CreditCurve,
CDS2_USD_XR_MARGINAL_CreditCurve,
CDS3_USD_XR_MARGINAL_CreditCurve,
CDS4_USD_XR_MARGINAL_CreditCurve,
CDS5_USD_XR_MARGINAL_CreditCurve),
YieldCurve,CorrelationMatrix_GaussianCopula,degree_freedom,0.40,100,"sobol")
EigenValuesVector(E,10^-16)
E = matrix(
c(2, 1, 4, 1, 2, 4,0, 0,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
EigenValuesVector(E,10^-16)
source("jacobi_transformation_functions.R")
current_dir = "P:/CQF/FinalProject/git-root/finalproject/interestrate-hjm/src"
source("jacobi_transformation_functions.R")
#clear workspace
rm(list = ls())
#variables
current_dir = "P:/CQF/FinalProject/git-root/finalproject/interestrate-hjm/src"
#End of variables
print("Program starting...")
#set current directory
setwd(current_dir)
source("class_definition.R") # define classes
#install / load dependencies
source("install_register_packages.R")
#source("class_definition.R") # define classes
#historical data loading, cleaning. Credit Curve Construction
source("market_data_functions.R")
source("market_data_loading.R")
#Principal Component Analysis
source("jacobi_transformation_functions.R")
EigenValuesVector(E,10^-16)
A = matrix(
c(2, 4, 3, 1), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE)        # fill matrix by rows
B = matrix(
c(2), # the data elements
nrow=1,              # number of rows
ncol=1,              # number of columns
byrow = TRUE)        # fill matrix by rows
C = matrix(
c(2, 4, 3, 1,1, 5,8, 9,10), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
D = matrix(
c(2, 4, -3, 1,1, -5,8, 9,10), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
E = matrix(
c(2, 1, 4, 1, 2, 4,0, 0,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
EigenValuesVector(E,10^-16)
toto = EigenValuesVector(E,10^-16)
toto%*%t(toto)
totoVect = EigenValuesMatrix(E,10^-16)
E
toto%*%totoVect%*%t(toto)
totoVect
t(toto)%*%totoVect%*%toto
diag
diag(c(2,4),2,2)
EigenValuesVector(E,10^-16)
totoVect
toto = EigenValuesVector(E,10^-16)
totoVect %*% diag(toto,3,3) %*% t(totoVect)
E
tata = eigen(E, TRUE, only.values = FALSE)
tata
tata$vectors %*% diag(tata$values) %*% t(tata$vectors)
tata$values %*% t(tata$values)
toto.values = EigenValuesVector(E,10^-16)
toto.vector = EigenValuesMatrix(E,10^-16)
toto.values
toto.vector
toto.vector = EigenValuesMatrix(E,10^-16)
toto.vector
tata.vector
tata.vectors
tata$vectors
toto.vector = EigenValuesMatrix(E,10^-16)
toto.vector
diag(3)
F = matrix(
c(2, 1, 0, 1, 2, 0,0, 0,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
F
JacobiRotationParameter(F)
toto.vector = EigenValuesMatrix(E,10^-16)
EigenValuesMatrix = function (A,tolerance) {
current_A = A
n = nrow(A)
current_V = diag(n)
sumsquare = UpperTriangleSumSquare(current_A)
k = 0
while (sumsquare > tolerance) {
next_A = JacobiA(current_A,n)
next_V = JacobiV(current_A,current_V,n)
cat("--------------\n")
cat("k=",k,"\n")
#cat("sumsquare=",sumsquare,"\n")
cat("next A:",next_A,"\n")
cat("next V:",next_V,"\n")
sumsquare = UpperTriangleSumSquare(next_A)
#recurrence
current_A = next_A
current_V = next_V
k = k+1
}
result = next_V
return(result)
}
toto.vector = EigenValuesMatrix(E,10^-16)
EigenValuesMatrix = function (A,tolerance) {
current_A = A
n = nrow(A)
current_V = diag(n)
sumsquare = UpperTriangleSumSquare(current_A)
k = 0
while (sumsquare > tolerance) {
next_A = JacobiA(current_A,n)
next_V = JacobiV(current_A,current_V,n)
cat("--------------\n")
cat("k=",k,"\n")
#cat("sumsquare=",sumsquare,"\n")
("next A:","\n")
print(next_A)
cat("next V:","\n")
print(next_V)
sumsquare = UpperTriangleSumSquare(next_A)
#recurrence
current_A = next_A
current_V = next_V
k = k+1
}
result = next_V
return(result)
}
EigenValuesMatrix = function (A,tolerance) {
current_A = A
n = nrow(A)
current_V = diag(n)
sumsquare = UpperTriangleSumSquare(current_A)
k = 0
while (sumsquare > tolerance) {
next_A = JacobiA(current_A,n)
next_V = JacobiV(current_A,current_V,n)
cat("--------------\n")
cat("k=",k,"\n")
#cat("sumsquare=",sumsquare,"\n")
cat("next A:","\n")
print(next_A)
cat("next V:","\n")
print(next_V)
sumsquare = UpperTriangleSumSquare(next_A)
#recurrence
current_A = next_A
current_V = next_V
k = k+1
}
result = next_V
return(result)
}
toto.vector = EigenValuesMatrix(E,10^-16)
E
E
toto.vector = EigenValuesMatrix(E,10^-16)
toto.vector
toto.value = EigenValuesValue(E,10^-16)
toto.value = EigenValuesVector(E,10^-16)
toto.value
toto.vector = EigenValuesMatrix(E,10^-16)
toto.vector = EigenValuesMatrix(E,10^-30)
toto.vector = EigenValuesMatrix(E,10^-30)
toto.vector = EigenValuesMatrix(E,10^-5)
toto.vector = EigenValuesMatrix(E,10^-5)
EigenValuesMatrix(E,10^-10) %&% EigenValuesVector(E,10^-10) %&% t(EigenValuesMatrix(E,10^-10))
EigenValuesMatrix(E,10^-10) %*% EigenValuesVector(E,10^-10) %*% t(EigenValuesMatrix(E,10^-10))
EigenValuesMatrix(E,10^-10) %*% diag(EigenValuesVector(E,10^-10),3) %*% t(EigenValuesMatrix(E,10^-10))
E
eigen(E,only.values = FALSE)$vectors %&% diag(eigen(E,only.values = FALSE)$values,3)  %&% t(eigen(E,only.values = FALSE)$vectors)
eigen(E,only.values = FALSE)$vectors %*% diag(eigen(E,only.values = FALSE)$values,3)  %*% t(eigen(E,only.values = FALSE)$vectors)
attributes(tata)
toto.values = EigenValuesVector(E,10^-16)
toto.vectors = EigenValuesMatrix(E,10^-16)
tata = eigen(E, TRUE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
tata.vectors %*% diag(tata.values,3)  %*% t(tata.vectors)
toto.vectors %*% diag(toto.values,3)  %*% t(toto.vectors)
toto.values = EigenValuesVector(E,10^-16)
toto.vectors = EigenValuesMatrix(E,10^-16)
tata = eigen(E, TRUE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
toto.vectors %*% diag(toto.values,3)  %*% t(toto.vectors)
tata.vectors %*% diag(tata.values,3)  %*% t(tata.vectors)
EigenValuesVector(E,10^-16)
EigenValuesMatrix(E,10^-16)
JacobiA(E,3)
JacobiA(E,3)
JacobiA = function(A, size) {
#define P
rotation_param = JacobiRotationParameter(A)
cat("Rot. param:",rotation_param,"\n")
P = JacobiRotationMatrix(,nrow(A))
#Rotation occurs below as A'=P'x A x P
A_next = t(P) %*% (A %*% P)
return(A_next)
}
JacobiA(E,3)
JacobiA = function(A, size) {
#define P
rotation_param = JacobiRotationParameter(A)
cat("Rot. param:",rotation_param,"\n")
P = JacobiRotationMatrix(rotation_param,nrow(A))
#Rotation occurs below as A'=P'x A x P
A_next = t(P) %*% (A %*% P)
return(A_next)
}
JacobiA(E,3)
JacobiA = function(A, size) {
#define P
rotation_param = JacobiRotationParameter(A)
cat("Rot. param:",rotation_param,"\n")
P = JacobiRotationMatrix(rotation_param,nrow(A))
print(P)
#Rotation occurs below as A'=P'x A x P
A_next = t(P) %*% (A %*% P)
return(A_next)
}
JacobiA(E,3)
JacobiA = function(A, size) {
#define P
rotation_param = JacobiRotationParameter(A)
cat("Rot. param:",rotation_param,"\n")
P = JacobiRotationMatrix(rotation_param,nrow(A))
cat("A:\n")
print(A)
cat("P:\n")
print(P)
#Rotation occurs below as A'=P'x A x P
A_next = t(P) %*% (A %*% P)
return(A_next)
}
JacobiA(E,3)
JacobiA(E,3)
E
E
JacobiA(E,3)
JacobiA = function(A, size) {
#define P
rotation_param = JacobiRotationParameter(A)
#cat("Rot. param:",rotation_param,"\n")
P = JacobiRotationMatrix(rotation_param,nrow(A))
#cat("A:\n")
#print(A)
#cat("P:\n")
#print(P)
#Rotation occurs below as A'=P'x A x P
A_next = t(P) %*% (A %*% P)
return(A_next)
}
EigenValuesMatrix(E,10^-16)
G = matrix(
c(2.89, 5.19, -6.1, 1, 2, 3.4,1.56, 0.3,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
G
EigenValuesMatrix(G,10^-16)
EigenValuesMatrix = function (A,tolerance) {
current_A = A
n = nrow(A)
current_V = diag(n)
sumsquare = UpperTriangleSumSquare(current_A)
k = 0
while (sumsquare > tolerance) {
next_A = JacobiA(current_A,n)
next_V = JacobiV(current_A,current_V,n)
#cat("--------------\n")
#cat("k=",k,"\n")
#cat("sumsquare=",sumsquare,"\n")
#cat("next A:","\n")
#print(next_A)
#cat("next V:","\n")
#print(next_V)
sumsquare = UpperTriangleSumSquare(next_A)
#recurrence
current_A = next_A
current_V = next_V
k = k+1
}
result = next_V
return(result)
}
EigenValuesMatrix(G,10^-16)
G = matrix(
c(2, 1, 10, 1, 2, 4,17, 51,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
EigenValuesMatrix(G,10^-16)
toto.values = EigenValuesVector(G,10^-16)
toto.vectors = EigenValuesMatrix(G,10^-16)
toto.vectors %*% diag(toto.values,3)  %*% t(toto.vectors)
toto.values = EigenValuesVector(G,10^-16)
toto.vectors = EigenValuesMatrix(G,10^-16)
tata = eigen(G, TRUE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
toto.vectors %*% diag(toto.values,3)  %*% t(toto.vectors)
tata.vectors %*% diag(tata.values,3)  %*% t(tata.vectors)
toto.values = EigenValuesVector(G,10^-16)
toto.vectors = EigenValuesMatrix(G,10^-16)
tata = eigen(G, FALSE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
toto.vectors %*% diag(toto.values,3)  %*% t(toto.vectors)
tata.vectors %*% diag(tata.values,3)  %*% t(tata.vectors)
r <- eigen(G)
V <- r$vectors
lam <- r$values
Lmbd =diag(lam)
Lmbd
V
V %*% Lmdb  %*% t(V)
Lmbd =diag(lam)
V %*% Lmdb  %*% t(V)
V %*% Lmbd  %*% t(V)
V %*% Lmbd  %*% solve(V)
toto.values = EigenValuesVector(G,10^-16)
toto.vectors = EigenValuesMatrix(G,10^-16)
tata = eigen(G, symetric = FALSE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
toto.values = EigenValuesVector(G,10^-16)
toto.vectors = EigenValuesMatrix(G,10^-16)
tata = eigen(G, FALSE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
toto.vectors %*% diag(toto.values,3)  %*% solve(toto.vectors)
tata.vectors %*% diag(tata.values,3)  %*% solve(tata.vectors)
tata.values
toto.values
toto.vectors
tata.vectors
E = matrix(
c(2, 1, 4, 1, 2, 4,0, 0,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
E
H = matrix(
c(1, 0.33, 0.50, 0.33, 1, 0.60,17, 51,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
H
H = matrix(
c(1, 0.33, 0.50, 0.33, 1, 0.60,0.5,0.6,1), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
H
toto.values = EigenValuesVector(H,10^-16)
toto.vectors = EigenValuesMatrix(H,10^-16)
tata = eigen(H, FALSE, only.values = FALSE)
tata.values = tata$values
tata.vectors = tata$vectors
toto.values; tata.values
toto.vectors; tata.vectors
toto.vectors %*% diag(toto.values,3)  %*% solve(toto.vectors)
tata.vectors %*% diag(tata.values,3)  %*% solve(tata.vectors)
#==============================================================================
# title           :master_program.R
# description     :This script will invoke all the other R scipts
# author          :Bertrand Le Nezet
# date            :20140713
# version         :1.0
#==============================================================================
# clear workspace
rm(list = ls())
# variables
current_dir = "P:/CQF/FinalProject/git-root/finalproject/creditbasket/src"
#End of variables
print("Program starting...")
#set current directory
setwd(current_dir)
# define common classes
source("class_definition.R")
# install / load dependencies
source("install_register_packages.R")
# historical data loading, cleaning. Credit Curve Construction
source("market_data_functions.R")
source("market_data_loading.R")
source("credit_curve_bootstrapping_functions.R")
# gaussian correlation matrix, student t correlation matrix and degree of freedom
source("default_probability_correlation_matrix.R")
print(CorrelationMatrix_GaussianCopula)
print(CorrelationMatrix_KendallTau)
print(CorrelationMatrix_StudentTCopula)
cat("degree of freedom",degree_freedom)
# calculate correlation matrix using stock log return
source("stock_log_return_correlation_matrix.R")
print(StockLogReturnCorrelationMatrix)
# Estimate Marginal Hazard Rates (empirical marginal distributions)
source("calculate_marginal_hazard_rates.R")
print(HazardRatesMatrix)
# Load NAG library
source("nag_library_wrapper.R")
# Load functions used in Monte Carlo loop
source("monte_carlo_functions.R")
# sampling from gaussian copula
source("gaussian_copula_functions.R")
source("sampling_from_gaussian_copula.R")
# sampling from student t copula
source("student_t_copula_functions.R")
source("sampling_from_student_t_copula.R")
#==============================================================================
# title           :master_program.R
# description     :This script will invoke all the other R scipts
# author          :Bertrand Le Nezet
# date            :20140713
# version         :1.0
#==============================================================================
#clear workspace
rm(list = ls())
#variables
current_dir = "P:/CQF/FinalProject/git-root/finalproject/interestrate-hjm/src"
#End of variables
print("Program starting...")
#set current directory
setwd(current_dir)
# define classes
source("class_definition.R")
#install / load dependencies
source("install_register_packages.R")
#historical data loading, cleaning. Credit Curve Construction
source("market_data_functions.R")
source("market_data_loading.R")
#Principal Component Analysis
source("jacobi_transformation_functions.R")
source("principal_component_analysis.R")
#Monte Carlo Simulation / Pricing
source("black76.R")
source("nag_library_wrapper.R")
source("monte_carlo_simulation_functions.R")
source("monte_carlo_simulation.R")
