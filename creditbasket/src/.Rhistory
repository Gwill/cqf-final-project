default_leg = (1-RecoveryRate)*GetDiscountFactor(YieldCurve,tau_k) * (1/5)
}
#premium leg calculation
#One coding solution is to create a variable that accumulates PL at each dt = 0.01 and will need a fiited discounting curve for this increment.
#integrate GetDiscountFactor from 0 to min_tau
premium_leg = 0
if (tau_list[1] == Inf) {
#i.e. No default within the life of the contract
for (j in seq(1,5)) {
premium_leg = premium_leg + GetDiscountFactor(YieldCurve,j)*1
}
premium_leg = premium_leg*(5/5)
}
else {
premium_leg = compute_premium_leg(YieldCurve,k,tau_list)
}
LegCalculation_studentt[i,"DefaultLeg"] = default_leg
LegCalculation_studentt[i,"PremiumLeg"] = premium_leg
}
LegCalculation_studentt
expectation_default_leg_studentt= mean(LegCalculation_studentt[,"DefaultLeg"])
expectation_premium_leg_studentt= mean(LegCalculation_studentt[,"PremiumLeg"])
expectation_spread_studentt = expectation_default_leg_studentt/expectation_premium_leg_studentt
expectation_spread_studentt
#convergence diagram
nbobservation = round(NumberSimulation/10)
expectation_default_leg_array = rep(NA,nbobservation)
expectation_premium_leg_array = rep(NA,nbobservation)
expectation_spread_array = rep(NA,nbobservation)
for (i in seq(1,nbobservation)) {
expectation_default_leg_array[i] = mean(LegCalculation_studentt[1:i,"DefaultLeg"])
expectation_premium_leg_array[i] = mean(LegCalculation_studentt[1:i,"PremiumLeg"])
expectation_spread_array[i] = expectation_default_leg_array[i]/expectation_premium_leg_array[i]
}
plot(seq(1,nbobservation),expectation_spread_array, type="l", log="x")
#k=1 ==> 0.0080870223
#k=2 ==> 0.0018593256
NumberSimulation = 1000
NumberOfTimesteps = 200
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
dX_Master
runif
runif(min=0, max=1)
runif(n=1,min=0, max=1)
runif(n=1,min=0, max=1)
runif(n=1,min=0, max=0.5)
runif(n=1,min=0, max=0.5)
runif(n=1,min=0, max=0.5)
MaturityList
NumberSimulation = 1000
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
drift = rep(NA,length(MaturityList))
volatility_1 = rep(NA,length(MaturityList))
volatility_2 = rep(NA,length(MaturityList))
volatility_3 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
drift[j] = rnorm(n=1,mean = 0, sd = 1) * j
vol_1[j] = runif(n=1,min=0, max=0.5)
vol_2[j] = runif(n=1,min=0, max=0.5)
vol_3[j] = runif(n=1,min=0, max=0.5)
}
NumberSimulation = 1000
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
MaturityList
length(MaturityList)
NumberSimulation = 1000
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
drift = rep(NA,length(MaturityList))
volatility_1 = rep(NA,length(MaturityList))
volatility_2 = rep(NA,length(MaturityList))
volatility_3 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
drift[j] = rnorm(n=1,mean = 0, sd = 1) * j
vol_1[j] = runif(n=1,min=0, max=0.5)
vol_2[j] = runif(n=1,min=0, max=0.5)
vol_3[j] = runif(n=1,min=0, max=0.5)
}
#pre-calculation
drift = rep(NA,length(MaturityList))
vol_1 = rep(NA,length(MaturityList))
vol_2 = rep(NA,length(MaturityList))
vol_3 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
drift[j] = rnorm(n=1,mean = 0, sd = 1) * j
vol_1[j] = runif(n=1,min=0, max=0.5)
vol_2[j] = runif(n=1,min=0, max=0.5)
vol_3[j] = runif(n=1,min=0, max=0.5)
}
length(seq(1,600))
NumberSimulation = 1000
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
drift = rep(NA,length(MaturityList))
vol_1 = rep(NA,length(MaturityList))
vol_2 = rep(NA,length(MaturityList))
vol_3 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
drift[j] = rnorm(n=1,mean = 0, sd = 1) * j
vol_1[j] = runif(n=1,min=0, max=0.5)
vol_2[j] = runif(n=1,min=0, max=0.5)
vol_3[j] = runif(n=1,min=0, max=0.5)
}
#init of random number / pseudo random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
#monte carlo loop
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
if (j<ncol(mat)) {
mat[i,j] = mat[i-1,j] + drift[j]*timestep +
sum(vol_1[j]*dX[i-1,1],vol_2[j]*dX[i-1,2],vol_3[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
mat[i,j] = mat[i-1,j] + drift[j]*timestep +
sum(vol_1[j]*dX[i-1,1],vol_2[j]*dX[i-1,2],vol_3[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
}
}
}
NumberSimulation = 100
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
quantity_1 = rep(NA,length(MaturityList))
quantity_2 = rep(NA,length(MaturityList))
quantity_3 = rep(NA,length(MaturityList))
quantity_4 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
quantity_1[j] = rnorm(n=1,mean = 0, sd = 1) * j
quantity_2[j] = runif(n=1,min=0, max=0.5)
quantity_3[j] = runif(n=1,min=0, max=0.5)
quantity_4[j] = runif(n=1,min=0, max=0.5)
}
#init of random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
timestamp = Sys.time()
#monte carlo loop
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
if (j<ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
}
}
#perform calculation using data in matrix mat
#...
}
cat("time to complete MC loop:",Sys.time()-timestamp, "\n")
NumberSimulation = 500
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
quantity_1 = rep(NA,length(MaturityList))
quantity_2 = rep(NA,length(MaturityList))
quantity_3 = rep(NA,length(MaturityList))
quantity_4 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
quantity_1[j] = rnorm(n=1,mean = 0, sd = 1) * j
quantity_2[j] = runif(n=1,min=0, max=0.5)
quantity_3[j] = runif(n=1,min=0, max=0.5)
quantity_4[j] = runif(n=1,min=0, max=0.5)
}
#init of random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
timestamp = Sys.time()
#monte carlo loop
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
if (j<ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
}
}
#perform calculation using data in matrix mat
#...
}
cat("time to complete MC loop:",Sys.time()-timestamp, "\n")
install.packages("Rprof")
library(Rprof)
NumberSimulation = 100
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
quantity_1 = rep(NA,length(MaturityList))
quantity_2 = rep(NA,length(MaturityList))
quantity_3 = rep(NA,length(MaturityList))
quantity_4 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
quantity_1[j] = rnorm(n=1,mean = 0, sd = 1) * j
quantity_2[j] = runif(n=1,min=0, max=0.5)
quantity_3[j] = runif(n=1,min=0, max=0.5)
quantity_4[j] = runif(n=1,min=0, max=0.5)
}
#init of random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
timestamp = Sys.time()
#monte carlo loop
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
if (j<ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
}
}
#perform calculation using data in matrix mat
#...
}
cat("time to complete MC loop:",Sys.time()-timestamp, "\n")
NumberSimulation = 100
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
quantity_1 = rep(NA,length(MaturityList))
quantity_2 = rep(NA,length(MaturityList))
quantity_3 = rep(NA,length(MaturityList))
quantity_4 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
quantity_1[j] = rnorm(n=1,mean = 0, sd = 1) * j
quantity_2[j] = runif(n=1,min=0, max=0.5)
quantity_3[j] = runif(n=1,min=0, max=0.5)
quantity_4[j] = runif(n=1,min=0, max=0.5)
}
#init of random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
timestamp = Sys.time()
#monte carlo loop
#testfunc = function(i,j) {
#
#}
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
if (j<ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
mat[i,j] = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
}
}
#perform calculation using data in matrix mat
#...
}
cat("time to complete MC loop:",Sys.time()-timestamp, "\n")
testfunc = function(i,j) {
if (j<ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
return(result)
}
testfunc = function(i,j,mat) {
if (j<ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
return(result)
}
testfunc = function(i,j,mat) {
if (j<ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
return(result)
}
testfunc.compiled = cmpfun(testfunc)
library(compiler)
testfunc = function(i,j,mat) {
if (j<ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
return(result)
}
testfunc.compiled = cmpfun(testfunc)
NumberSimulation = 100
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
quantity_1 = rep(NA,length(MaturityList))
quantity_2 = rep(NA,length(MaturityList))
quantity_3 = rep(NA,length(MaturityList))
quantity_4 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
quantity_1[j] = rnorm(n=1,mean = 0, sd = 1) * j
quantity_2[j] = runif(n=1,min=0, max=0.5)
quantity_3[j] = runif(n=1,min=0, max=0.5)
quantity_4[j] = runif(n=1,min=0, max=0.5)
}
#init of random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
timestamp = Sys.time()
#monte carlo loop
testfunc = function(i,j,mat) {
if (j<ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
return(result)
}
testfunc.compiled = cmpfun(testfunc)
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
mat[i,j] = testfunc(i,j,mat)
}
}
#perform calculation using data in matrix mat
#...
}
cat("time to complete MC loop:",Sys.time()-timestamp, "\n")
library(compiler)
NumberSimulation = 100
NumberOfTimesteps = 200
maturityBucket = 1/12
NumberOfYear = 2
timestep = 0.01
MaxMaturity = 2
MaturityList = seq(1/12,MaxMaturity,by=maturityBucket)
input_data = runif(n=length(MaturityList),min=0.4, max=0.9)
#pre-calculation
quantity_1 = rep(NA,length(MaturityList))
quantity_2 = rep(NA,length(MaturityList))
quantity_3 = rep(NA,length(MaturityList))
quantity_4 = rep(NA,length(MaturityList))
for (j in seq(1,length(MaturityList))) {
quantity_1[j] = rnorm(n=1,mean = 0, sd = 1) * j
quantity_2[j] = runif(n=1,min=0, max=0.5)
quantity_3[j] = runif(n=1,min=0, max=0.5)
quantity_4[j] = runif(n=1,min=0, max=0.5)
}
#init of random number
dX_Master = rnorm(n = NumberSimulation * 3 * NumberOfTimesteps, mean = 0, sd = 1)
timestamp = Sys.time()
#monte carlo loop
testfunc = function(i,j,mat) {
if (j<ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j+1]-mat[i-1,j])/(maturityBucket))*timestep
}
else if (j == ncol(mat)) {
result = mat[i-1,j] + quantity_1[j]*timestep +
sum(quantity_2[j]*dX[i-1,1],quantity_3[j]*dX[i-1,2],quantity_4[j]*dX[i-1,3])*sqrt(timestep) +
((mat[i-1,j]-mat[i-1,j-1])/(maturityBucket))*timestep
}
return(result)
}
testfunc.compiled = cmpfun(testfunc)
for (k in seq(1,NumberSimulation)){
if (k%%(NumberSimulation/20) == 0) cat((k/NumberSimulation)*100,"% ...\n")
#matrix init
mat = matrix(NA, nrow=(NumberOfTimesteps+1),ncol=length(MaturityList),byrow = TRUE);
mat[1,] = input_data
dX = matrix(dX_Master[((k-1)* 3 * NumberOfTimesteps+1):(k * 3 * NumberOfTimesteps)],ncol=3,nrow=NumberOfTimesteps,byrow = TRUE)
#matrix population
for (i in seq(2,nrow(mat))) {
for (j in seq(1,ncol(mat))) {
mat[i,j] = testfunc.compiled(i,j,mat)
}
}
#perform calculation using data in matrix mat
#...
}
cat("time to complete MC loop:",Sys.time()-timestamp, "\n")
library(lineprof)
install.packages("lineprof")
